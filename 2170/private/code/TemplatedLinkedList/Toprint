%!PS-Adobe-3.0
%%BoundingBox: 18 36 594 756
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Thu Aug  1 10:49:54 2019
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6.5 90
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 720 def
/d_page_h 576 def
/d_header_x 0 def
/d_header_y 540 def
/d_header_w 720 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 720 def
/d_footer_h 0 def
/d_output_w 720 def
/d_output_h 540 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
36 -594 translate
/pagenum 1 def
/fname (TemplatedLinkedList) def
/fdir (.) def
/ftail (TemplatedLinkedList) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (08/01/19) def
/modtimestr (10:49:38) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 530 M
(// A class template for holding a linked list.) s
5 522 M
(#ifndef LINKEDLIST_H) s
5 514 M
(#define LINKEDLIST_H) s
5 506 M
(#include <iostream>     // For cout) s
5 498 M
(using namespace std;) s
5 482 M
(template <class T>) s
5 474 M
(class LinkedList) s
5 466 M
({) s
5 458 M
(private:) s
5 450 M
(   // Declare a structure for the list) s
5 442 M
(   struct ListNode) s
5 434 M
(   {) s
5 426 M
(      T value;                // The value in this node) s
5 418 M
(      struct ListNode *next;  // To point to the next node) s
5 410 M
(   }; ) s
5 394 M
(   ListNode *head;   // List head pointer) s
5 378 M
(public:) s
5 370 M
(   // Constructor) s
5 362 M
(   LinkedList\(\)) s
5 354 M
(      { head = nullptr; }) s
5 346 M
(      ) s
5 338 M
(   // Destructor) s
5 330 M
(   ~LinkedList\(\);) s
5 322 M
(      ) s
5 314 M
(   // Linked list operations) s
5 306 M
(   void appendNode\(T\);) s
5 298 M
(   void insertNode\(T\);) s
5 290 M
(   void deleteNode\(T\);) s
5 282 M
(   void displayList\(\) const;) s
5 274 M
(};) s
5 250 M
(//**************************************************) s
5 242 M
(// appendNode appends a node containing the value  *) s
5 234 M
(// pased into newValue, to the end of the list.    *) s
5 226 M
(//**************************************************) s
5 210 M
(template <class T>) s
5 202 M
(void LinkedList<T>::appendNode\(T newValue\)) s
5 194 M
({) s
5 186 M
(   ListNode *newNode;  // To point to a new node) s
5 178 M
(   ListNode *nodePtr;  // To move through the list) s
5 162 M
(   // Allocate a new node and store newValue there.) s
5 154 M
(   newNode = new ListNode;) s
5 146 M
(   newNode->value = newValue;) s
5 138 M
(   newNode->next = nullptr;) s
5 122 M
(   // If there are no nodes in the list) s
5 114 M
(   // make newNode the first node.) s
5 106 M
(   if \(!head\)) s
5 98 M
(      head = newNode;) s
5 90 M
(   else  // Otherwise, insert newNode at end.) s
5 82 M
(   {) s
5 74 M
(      // Initialize nodePtr to head of list.) s
5 66 M
(      nodePtr = head;) s
5 50 M
(      // Find the last node in the list.) s
5 42 M
(      while \(nodePtr->next\)) s
5 34 M
(         nodePtr = nodePtr->next;) s
5 18 M
(      // Insert newNode as the last node.) s
5 10 M
(      nodePtr->next = newNode;) s
5 2 M
(   }) s
365 530 M
(}) s
365 514 M
(//**************************************************) s
365 506 M
(// displayList shows the value                     *) s
365 498 M
(// stored in each node of the linked list          *) s
365 490 M
(// pointed to by head.                             *) s
365 482 M
(//**************************************************) s
365 466 M
(template <class T>) s
365 458 M
(void LinkedList<T>::displayList\(\) const) s
365 450 M
({) s
365 442 M
(   ListNode *nodePtr;  // To move through the list) s
365 426 M
(   // Position nodePtr at the head of the list.) s
365 418 M
(   nodePtr = head;) s
365 402 M
(   // While nodePtr points to a node, traverse) s
365 394 M
(   // the list.) s
365 386 M
(   while \(nodePtr\)) s
365 378 M
(   {) s
365 370 M
(      // Display the value in this node.) s
365 362 M
(      cout << nodePtr->value << endl;) s
365 346 M
(      // Move to the next node.) s
365 338 M
(      nodePtr = nodePtr->next;) s
365 330 M
(   }) s
365 322 M
(}) s
365 306 M
(//**************************************************) s
365 298 M
(// The insertNode function inserts a node with     *) s
365 290 M
(// newValue copied to its value member.            *) s
365 282 M
(//**************************************************) s
365 266 M
(template <class T>) s
365 258 M
(void LinkedList<T>::insertNode\(T newValue\)) s
365 250 M
({) s
365 242 M
(   ListNode *newNode;                                   // A new node) s
365 234 M
(   ListNode *nodePtr;                                   // To traverse the list) s
365 226 M
(   ListNode *previousNode = nullptr;    // The previous node) s
365 210 M
(   // Allocate a new node and store newValue there.) s
365 202 M
(   newNode = new ListNode;) s
365 194 M
(   newNode->value = newValue;) s
365 186 M
(   ) s
365 178 M
(   // If there are no nodes in the list) s
365 170 M
(   // make newNode the first node) s
365 162 M
(   if \(!head\)) s
365 154 M
(   {) s
365 146 M
(      head = newNode;) s
365 138 M
(      newNode->next = nullptr;) s
365 130 M
(   }) s
365 122 M
(   else  // Otherwise, insert newNode) s
365 114 M
(   {) s
365 106 M
(      // Position nodePtr at the head of list.) s
365 98 M
(      nodePtr = head;) s
365 82 M
(      // Initialize previousNode to nullptr.) s
365 74 M
(      previousNode = nullptr;) s
365 58 M
(      // Skip all nodes whose value is less than newValue.) s
365 50 M
(      while \(nodePtr != nullptr && nodePtr->value < newValue\)) s
365 42 M
(      {  ) s
365 34 M
(         previousNode = nodePtr;) s
365 26 M
(         nodePtr = nodePtr->next;) s
365 18 M
(      }) s
365 2 M
(      // If the new node is to be the 1st in the list,) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
36 -594 translate
/pagenum 2 def
/fname (TemplatedLinkedList) def
/fdir (.) def
/ftail (TemplatedLinkedList) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (08/01/19) def
/modtimestr (10:49:38) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 530 M
(      // insert it before all other nodes.) s
5 522 M
(      if \(previousNode == nullptr\)) s
5 514 M
(      {) s
5 506 M
(         head = newNode;) s
5 498 M
(         newNode->next = nodePtr;) s
5 490 M
(      }) s
5 482 M
(      else  // Otherwise insert after the previous node.) s
5 474 M
(      {) s
5 466 M
(         previousNode->next = newNode;) s
5 458 M
(         newNode->next = nodePtr;) s
5 450 M
(      }) s
5 442 M
(   }) s
5 434 M
(}) s
5 418 M
(//*****************************************************) s
5 410 M
(// The deleteNode function searches for a node        *) s
5 402 M
(// with searchValue as its value. The node, if found, *) s
5 394 M
(// is deleted from the list and from memory.          *) s
5 386 M
(//*****************************************************) s
5 370 M
(template <class T>) s
5 362 M
(void LinkedList<T>::deleteNode\(T searchValue\)) s
5 354 M
({) s
5 346 M
(   ListNode *nodePtr;       // To traverse the list) s
5 338 M
(   ListNode *previousNode;  // To point to the previous node) s
5 322 M
(   // If the list is empty, do nothing.) s
5 314 M
(   if \(!head\)) s
5 306 M
(      return;) s
5 298 M
(   ) s
5 290 M
(   // Determine if the first node is the one.) s
5 282 M
(   if \(head->value == searchValue\)) s
5 274 M
(   {) s
5 266 M
(      nodePtr = head->next;) s
5 258 M
(      delete head;) s
5 250 M
(      head = nodePtr;) s
5 242 M
(   }) s
5 234 M
(   else) s
5 226 M
(   {) s
5 218 M
(      // Initialize nodePtr to head of list) s
5 210 M
(      nodePtr = head;) s
5 194 M
(      // Skip all nodes whose value member is ) s
5 186 M
(      // not equal to num.) s
5 178 M
(      while \(nodePtr != nullptr && nodePtr->value != searchValue\)) s
5 170 M
(      {  ) s
5 162 M
(         previousNode = nodePtr;) s
5 154 M
(         nodePtr = nodePtr->next;) s
5 146 M
(      }) s
5 130 M
(      // If nodePtr is not at the end of the list, ) s
5 122 M
(      // link the previous node to the node after) s
5 114 M
(      // nodePtr, then delete nodePtr.) s
5 106 M
(      if \(nodePtr\)) s
5 98 M
(      {) s
5 90 M
(         previousNode->next = nodePtr->next;) s
5 82 M
(         delete nodePtr;) s
5 74 M
(      }) s
5 66 M
(   }) s
5 58 M
(}) s
5 42 M
(//**************************************************) s
5 34 M
(// Destructor                                      *) s
5 26 M
(// This function deletes every node in the list.   *) s
5 18 M
(//**************************************************) s
5 2 M
(template <class T>) s
365 530 M
(LinkedList<T>::~LinkedList\(\)) s
365 522 M
({) s
365 514 M
(   ListNode *nodePtr;   // To traverse the list) s
365 506 M
(   ListNode *nextNode;  // To point to the next node) s
365 490 M
(   // Position nodePtr at the head of the list.) s
365 482 M
(   nodePtr = head;) s
365 466 M
(   // While nodePtr is not at the end of the list...) s
365 458 M
(   while \(nodePtr != nullptr\)) s
365 450 M
(   {) s
365 442 M
(      // Save a pointer to the next node.) s
365 434 M
(      nextNode = nodePtr->next;) s
365 418 M
(      // Delete the current node.) s
365 410 M
(      delete nodePtr;) s
365 394 M
(      // Position nodePtr at the next node.) s
365 386 M
(      nodePtr = nextNode;) s
365 378 M
(   }) s
365 370 M
(}) s
365 362 M
(#endif ) s
365 346 M
(=========================================================) s
365 330 M
(// Specification file for the FeetInches class) s
365 322 M
(#ifndef FEETINCHES_H) s
365 314 M
(#define FEETINCHES_H) s
365 298 M
(#include <iostream>) s
365 290 M
(using namespace std;) s
365 274 M
(class FeetInches;       // Forward Declaration) s
365 258 M
(// Function Prototypes for Overloaded Stream Operators) s
365 250 M
(ostream &operator << \(ostream &, const FeetInches &\);) s
365 242 M
(istream &operator >> \(istream &, FeetInches &\);) s
365 226 M
(// The FeetInches class holds distances or measurements ) s
365 218 M
(// expressed in feet and inches.) s
365 202 M
(class FeetInches) s
365 194 M
({) s
365 186 M
(private:) s
365 178 M
(   int feet;        // To hold a number of feet) s
365 170 M
(   int inches;      // To hold a number of inches) s
365 162 M
(   void simplify\(\); // Defined in FeetInches.cpp) s
365 154 M
(public:) s
365 146 M
(   // Constructor) s
365 138 M
(        FeetInches\(int f = 0, int i = 0\)) s
365 130 M
(                { feet = f;) s
365 122 M
(                  inches = i;) s
365 114 M
(                  simplify\(\); }) s
365 98 M
(       // Mutator functions) s
365 90 M
(        void setFeet\(int f\) { feet = f; }) s
365 74 M
(        void setInches\(int i\)) s
365 66 M
(                { inches = i;) s
365 58 M
(                  simplify\(\); }) s
365 42 M
(        // Accessor functions) s
365 34 M
(        int getFeet\(\) const { return feet; }) s
365 18 M
(        int getInches\(\) const { return inches; }) s
365 2 M
(        // Overloaded operator functions) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
36 -594 translate
/pagenum 3 def
/fname (TemplatedLinkedList) def
/fdir (.) def
/ftail (TemplatedLinkedList) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (08/01/19) def
/modtimestr (10:49:38) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 530 M
(        FeetInches operator + \(const FeetInches &\); // Overloaded +) s
5 522 M
(        FeetInches operator - \(const FeetInches &\); // Overloaded -) s
5 514 M
(        FeetInches operator ++ \(\);              // Prefix ++) s
5 506 M
(        FeetInches operator ++ \(int\);           // Postfix ++) s
5 498 M
(        bool operator > \(const FeetInches &\);   // Overloaded >) s
5 490 M
(        bool operator < \(const FeetInches &\);   // Overloaded <) s
5 482 M
(        bool operator == \(const FeetInches &\);  // Overloaded ==) s
5 474 M
(        bool operator != \(const FeetInches &\);  // Overloaded ==) s
5 458 M
(        // Conversion functions) s
5 450 M
(        operator double\(\);) s
5 442 M
(        operator int\(\);) s
5 434 M
(        ) s
5 426 M
(        // Friends) s
5 418 M
(        friend ostream &operator << \(ostream &, const FeetInches &\);) s
5 410 M
(        friend istream &operator >> \(istream &, FeetInches &\);) s
5 402 M
(};) s
5 394 M
(#endif) s
5 378 M
(=================================================) s
5 370 M
(// This program demonstrates the linked list template.) s
5 362 M
(#include <iostream>) s
5 354 M
(#include "LinkedList.h") s
5 346 M
(#include "FeetInches.h") s
5 338 M
(using namespace std;) s
5 322 M
(int main\(\)) s
5 314 M
({) s
5 306 M
(   // Define a LinkedList object.) s
5 298 M
(   LinkedList<FeetInches> list;) s
5 282 M
(   // Define some FeetInches objects.) s
5 274 M
(   FeetInches distance1\(5, 4\); // 5 feet 4 inches) s
5 266 M
(   FeetInches distance2\(6, 8\); // 6 feet 8 inches) s
5 258 M
(   FeetInches distance3\(8, 9\); // 8 feet 9 inches) s
5 242 M
(   // Store the FeetInches objects in the list.) s
5 234 M
(   list.appendNode\(distance1\); // 5 feet 4 inches) s
5 226 M
(   list.appendNode\(distance2\); // 6 feet 8 inches) s
5 218 M
(   list.appendNode\(distance3\); // 8 feet 9 inches) s
5 202 M
(   // Display the values in the list.) s
5 194 M
(   cout << "Here are the initial values:\\n";) s
5 186 M
(   list.displayList\(\);) s
5 178 M
(   cout << endl;) s
5 162 M
(   // Insert another FeetInches object.) s
5 154 M
(   cout << "Now inserting the value 7 feet 2 inches.\\n";) s
5 146 M
(   FeetInches distance4\(7, 2\);) s
5 138 M
(   list.insertNode\(distance4\);) s
5 122 M
(   // Display the values in the list.) s
5 114 M
(   cout << "Here are the nodes now.\\n";) s
5 106 M
(   list.displayList\(\);) s
5 98 M
(   cout << endl;) s
5 82 M
(   // Delete the last node.) s
5 74 M
(   cout << "Now deleting the last node.\\n";) s
5 66 M
(   FeetInches distance5\(8, 9\);) s
5 58 M
(   list.deleteNode\(distance5\);) s
5 42 M
(   // Display the values in the list.) s
5 34 M
(   cout << "Here are the nodes left.\\n";) s
5 26 M
(   list.displayList\(\);) s
5 18 M
(   return 0;) s
5 10 M
(}) s
_R
S
%%Trailer
%%Pages: 3
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
