%!PS-Adobe-3.0
%%BoundingBox: 24 24 571 818
%%Title: Enscript Output
%%For: Cen Li
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Sun Mar  1 13:31:13 2015
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 6
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 794 def
/d_page_h 547 def
/d_header_x 0 def
/d_header_y 511 def
/d_header_w 794 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 794 def
/d_footer_h 0 def
/d_output_w 794 def
/d_output_h 511 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 1 def
/fname (handout10) def
/fdir (.) def
/ftail (handout10) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (03/01/15) def
/modtimestr (13:30:57) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 501 M
(// Specification file array-based list \(\342\\200\\234list.h\342\\200\\235\)) s
5 493 M
(// Sorted List) s
5 485 M
(const  int  MAX_LENGTH  =  50;) s
5 477 M
(typedef int ItemType;) s
5 461 M
(#ifndef SortedList_H) s
5 453 M
(#define SortedList_H) s
5 437 M
(class SortedList           // Declares a class data type) s
5 429 M
({                       ) s
5 413 M
(public:               // Public member functions) s
5 397 M
(    SortedList\(\);           // constructor) s
5 381 M
(    bool IsEmpty \(\) const;) s
5 373 M
(    // Post: Return value is true if length is equal) s
5 365 M
(    //  to zero and false otherwise) s
5 349 M
(    bool IsFull \(\)  const;              ) s
5 341 M
(    // Post: Return value is true if length is equal) s
5 333 M
(    //  to MAX_LENGTH and false otherwise) s
5 317 M
(    int  Length \(\)  const; // Returns length of list ) s
5 309 M
(    // Post: Return value is length) s
5 293 M
(    void Insert \(ItemType  item\);   ) s
5 285 M
(    // Pre: length < MAX_LENGTH && item is assigned) s
5 277 M
(    // Post: data[length@entry] == item &&) s
5 269 M
(    //       length == length@entry + 1) s
5 253 M
(    void Delete \(ItemType  item\);   ) s
5 245 M
(    // Pre: length > 0  &&  item is assigned) s
5 237 M
(    // Post: IF item is in data array at entry) s
5 229 M
(    //      First occurrence of item is no longer) s
5 221 M
(    //   in array) s
5 213 M
(    //         && length == length@entry - 1) s
5 205 M
(    //      ELSE) s
5 197 M
(    //       length and data array are unchanged) s
5 181 M
(    bool IsPresent\(ItemType  item\)  const;) s
5 173 M
(    // Post: currentPos has been initialized.) s
5 157 M
(    void SelSort \(\);) s
5 149 M
(    // Sorts list into ascending order) s
5 133 M
(    void Reset \(\);) s
5 125 M
(    // Post: currentPos has been initialized.) s
5 109 M
(    ItemType GetNextItem \(\);  ) s
5 101 M
(    // Pre: No transformer has been executed since last call) s
5 93 M
(    // Post:Return value is currentPos@entry) s
5 85 M
(    //   Current position has been updated) s
5 77 M
(    //   If last item returned, next call returns first item) s
5 61 M
(    void Print\(\) const;) s
5 53 M
(    // Display the list of items) s
5 37 M
(private:          // Private data members) s
5 29 M
(    int length; // Number of values currently stored) s
5 21 M
(    ItemType data[MAX_LENGTH]; ) s
5 13 M
(    int  currentPos;  // Used in iteration       ) s
402 501 M
(    void   BinSearch \( ItemType item, bool& found, int& position\) const;    ) s
402 493 M
(};  ) s
402 477 M
(#endif) s
402 461 M
(================================================================) s
402 445 M
(// Implementation file array-based list \(\342\\200\\234list.cpp\342\\200\\235\)) s
402 429 M
(#include "slist.h") s
402 421 M
(#include  <iostream>) s
402 413 M
(using namespace std;) s
402 397 M
(SortedList::SortedList \(\)) s
402 389 M
(// Constructor) s
402 381 M
(// Post: length == 0) s
402 373 M
({) s
402 365 M
(      length = 0;) s
402 357 M
(}) s
402 341 M
(bool  SortedList::IsEmpty \(\)  const) s
402 333 M
(// Post: Return value is true if length is equal) s
402 325 M
(//  to zero and false otherwise) s
402 317 M
({) s
402 309 M
(      return \(length == 0\);) s
402 301 M
(}) s
402 285 M
(bool  SortedList::IsFull \(\)  const) s
402 277 M
(// Post: Return value is true if length is equal) s
402 269 M
(//  to MAX_LENGTH and false otherwise) s
402 261 M
({) s
402 253 M
(      return \(length == MAX_LENGTH\);) s
402 245 M
(}) s
402 237 M
(      ) s
402 229 M
(int  SortedList::Length \(\)  const) s
402 221 M
(// Post: Return value is length) s
402 213 M
({    ) s
402 205 M
(      return  length;) s
402 197 M
(}) s
402 181 M
(void SortedList::Insert \(/* in */  ItemType  item\)) s
402 173 M
(// Pre: length < MAX_LENGTH && item is assigned) s
402 165 M
(//    && data[0 . . length-1] are in ) s
402 157 M
(//    ascending order) s
402 149 M
(// Post: item is in the list && length == ) s
402 141 M
(//    length@entry + 1 && data[0 . . length-1] are ) s
402 133 M
(//    in ascending order) s
402 125 M
({) s
402 117 M
(    int index;) s
402 109 M
(    // Find proper location for new element) s
402 93 M
(    index  =  length - 1;) s
402 85 M
(    // Starting at bottom of array shift down) s
402 77 M
(    //  values larger than item to make room for ) s
402 69 M
(    //  new item) s
402 61 M
(     ) s
402 53 M
(    while \(index >= 0  &&  item < data[index] \)) s
402 45 M
(    {   ) s
402 37 M
(          data[index + 1]  =  data[index];) s
402 29 M
(          index--;) s
402 21 M
(    }   ) s
402 5 M
(    // Insert item into array) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 2 def
/fname (handout10) def
/fdir (.) def
/ftail (handout10) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (03/01/15) def
/modtimestr (13:30:57) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 501 M
(    data[index] = item;) s
5 493 M
(    length++;) s
5 485 M
(}) s
5 461 M
(bool SortedList::IsPresent\( /* in */ ItemType item\) const   ) s
5 453 M
(// Searches the list for item, reporting  whether found) s
5 445 M
(// Post: Function value is true, if item is in ) s
5 437 M
(//   data[0 . . length-1] and is false otherwise) s
5 429 M
({    ) s
5 421 M
(    int index  =  0;) s
5 413 M
(    while \(index < length && item != data[index]\)) s
5 405 M
(          index++;) s
5 389 M
(    return  \(index < length\);) s
5 381 M
(}) s
5 365 M
(void  SortedList::Delete \( /* in */  ItemType  item\) ) s
5 357 M
(//  Deletes item from list, if it is there) s
5 349 M
(//  Pre: 0 < length <= INT_MAX/2 && item is assigned) s
5 341 M
(//     && data[0 . . length-1] are in ascending order) s
5 333 M
(//  Post: IF item is in data array at entry) s
5 325 M
(//   First occurrence of item is no longer in array) s
5 317 M
(//   && length == length@entry-1) s
5 309 M
(//   && data[0 . . Length-1] are in ascending order) s
5 301 M
(//     ELSE) s
5 293 M
(//     length and data array are unchanged) s
5 285 M
({    ) s
5 277 M
(    bool found;  // true, if item is found) s
5 269 M
(    int  position; // Position of item, if found) s
5 261 M
(    int  index;) s
5 245 M
(    // Find location of element to be deleted) s
5 237 M
(    BinSearch \(item, found, position\);) s
5 229 M
(    if \(found\)  {) s
5 221 M
(       // Shift elements that follow in sorted list) s
5 213 M
(       for \(index = position; index < length + 1;  index++\)) s
5 205 M
(           data[index ] = data[index  + 1];) s
5 189 M
(       length--;) s
5 181 M
(   }) s
5 173 M
(}) s
5 149 M
(void  SortedList::BinSearch \(ItemType  item,   bool&  found,  int&  position\)  ) s
5 141 M
(// Searches sorted list for item, returning position of item,) s
5 133 M
(//  if item was found) s
5 125 M
({   ) s
5 117 M
(    int middle;) s
5 109 M
(    int first  =  0;) s
5 101 M
(    int last  = length - 1;) s
5 93 M
(    found = false;) s
5 77 M
(    while \(last >= first  &&   !found\) {  ) s
5 69 M
(         middle = \(first + last\)/2; // Index of middle element) s
5 53 M
(         if \(item  <  data[middle]\)     ) s
5 45 M
(             last = middle - 1;  // Look in first half next ) s
5 37 M
(         else if \(item  >  data[middle]\)     ) s
5 29 M
(            first = middle + 1;  // Look in second half next) s
5 21 M
(         else) s
5 13 M
(            found = true;        // Item  has been found) s
5 5 M
(     }) s
402 501 M
(     if  \(found\) ) s
402 493 M
(         position = middle;) s
402 485 M
(}) s
402 461 M
(void SortedList::Reset\(\)) s
402 453 M
(// Post: currentPos has been initialized.) s
402 445 M
({) s
402 437 M
(    currentPos = 0;) s
402 429 M
(}) s
402 405 M
(ItemType SortedList::GetNextItem \(\)) s
402 397 M
(// Pre: No transformer has been executed since last call) s
402 389 M
(// Post:Return value is currentPos@entry) s
402 381 M
(//   Current position has been updated) s
402 373 M
(//   If last item returned, next call returns first item) s
402 365 M
({) s
402 357 M
(    ItemType item;) s
402 349 M
(    item = data[currentPos];) s
402 341 M
(    if \(currentPos == length - 1\)) s
402 333 M
(        currentPos = 0;) s
402 325 M
(    else) s
402 317 M
(        currentPos++;) s
402 309 M
(    return item;    ) s
402 301 M
(}) s
402 285 M
(void  SortedList::SelSort \(\) ) s
402 277 M
(// Sorts list into ascending order ) s
402 269 M
({   ) s
402 261 M
(    ItemType temp;) s
402 253 M
(    int sIndx;) s
402 245 M
(    int minIndx; // Index of minimum so far    ) s
402 237 M
(    ) s
402 229 M
(    for \(int passCount = 0; passCount < length - 1; passCount++\) {) s
402 213 M
(       minIndx = passCount;) s
402 197 M
(       // Find index of smallest value left) s
402 189 M
(       for \(sIndx = passCount + 1; sIndx < length; sIndx++\)  {) s
402 181 M
(          if \(data[sIndx] < data[minIndx]\)) s
402 173 M
(                minIndx = sIndx;) s
402 165 M
(       }) s
402 149 M
(       temp = data[minIndx];     // Swap ) s
402 141 M
(       data[minIndx] = data[passCount];) s
402 133 M
(       data[passCount] = temp;) s
402 125 M
(   }) s
402 117 M
(}) s
402 101 M
(=================================================================) s
402 85 M
(// main.cpp) s
402 77 M
(// client program for the unsorted list in array based implementation) s
402 69 M
(// It illustrates the usage of list member functions) s
402 53 M
(#include "slist.h") s
402 45 M
(#include <iostream>) s
402 37 M
(#include <fstream>) s
402 29 M
(#include <cassert>) s
402 21 M
(using namespace std;) s
402 5 M
(int main \(\)  ) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 3 def
/fname (handout10) def
/fdir (.) def
/ftail (handout10) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (03/01/15) def
/modtimestr (13:30:57) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 501 M
({) s
5 493 M
(    SortedList aList;  // created an emtpy list class object) s
5 485 M
(    ItemType value;) s
5 477 M
(    ifstream myIn\("listData.dat"\);) s
5 469 M
(    assert\(myIn\);) s
5 453 M
(    while \(!aList.IsFull\(\) && \(myIn>>value\)\)  {) s
5 445 M
(        if \(!aList.IsPresent\(value\)\) // maintain a list of unique values) s
5 437 M
(            aList.Insert\(value\);) s
5 429 M
(    }) s
5 413 M
(    // display the list: Iterate through the list) s
5 405 M
(    aList.Reset\(\);   // ?!) s
5 397 M
(    cout << "The list of values are: " ;) s
5 389 M
(    cout << aList.Length\(\) << endl;) s
5 381 M
(    for \(int i=0; i<aList.Length\(\); i++\)   {) s
5 373 M
(        cout << aList.GetNextItem\(\) << endl;) s
5 365 M
(    }) s
5 357 M
(        ) s
5 349 M
(    // prompt the user to enter a value to delete from the list) s
5 341 M
(    cout << "Enter value to delete : "; ) s
5 333 M
(    cin >> value;) s
5 325 M
(    if \(aList.IsPresent\(\)\) {) s
5 317 M
(        aList.Delete\(value\);) s
5 309 M
(        cout << "After deleting, the list of values are: " << endl;) s
5 301 M
(        for \(int i=0; i<aList.Length\(\); i++\)   {) s
5 293 M
(            cout << aList.GetNextItem\(\) << endl;) s
5 285 M
(        }) s
5 277 M
(    }) s
5 269 M
(    else {) s
5 261 M
(        cerr << "The value is not in the list, deletion not carried out." << endl;) s
5 253 M
(    }) s
5 229 M
(    myIn.close\(\);) s
5 221 M
(    return 0;) s
5 213 M
(}) s
_R
S
%%Trailer
%%Pages: 3
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
