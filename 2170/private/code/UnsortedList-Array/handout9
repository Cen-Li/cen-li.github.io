// Specification file array-based list (“list.h”)
const  int  MAX_LENGTH  =  50;
typedef int ItemType;

#ifndef List_H
#define List_H

class List           // Declares a class data type
{                       

public:               // Public member functions

    List();           // constructor
    bool IsEmpty () const;
    // Post: Return value is true if length is equal
    //  to zero and false otherwise

    bool IsFull ()  const;              
    // Post: Return value is true if length is equal
    //  to MAX_LENGTH and false otherwise

    int  Length ()  const; // Returns length of list 
    // Post: Return value is length

    void Insert (ItemType  item);   
    // Pre: length < MAX_LENGTH && item is assigned
    // Post: data[length@entry] == item &&
    //       length == length@entry + 1

    void Delete (ItemType  item);   
    // Pre: length > 0  &&  item is assigned
    // Post: IF item is in data array at entry
    //      First occurrence of item is no longer
    //   in array
    //         && length == length@entry - 1
    //      ELSE
    //       length and data array are unchanged

    bool IsPresent(ItemType  item)  const;
    // Post: currentPos has been initialized.

    void SelSort ();
    // Sorts list into ascending order

    void Reset ();
    // Post: currentPos has been initialized.

    ItemType GetNextItem ();  
    // Pre: No transformer has been executed since last call
    // Post:Return value is currentPos@entry
    //   Current position has been updated
    //   If last item returned, next call returns first item

private:          // Private data members
    int length; // Number of values currently stored
    ItemType data[MAX_LENGTH]; 
    int  currentPos;  // Used in iteration       
};  

#endif

===============================================================
// Implementation file array-based list (“list.cpp”)

#include "list.h"
#include  <iostream>
using namespace std;

List::List ()
// Constructor
// Post: length == 0
{
      length = 0;
}

bool  List::IsEmpty ()  const
// Post: Return value is true if length is equal
//  to zero and false otherwise
{
      return (length == 0);
}

bool  List::IsFull ()  const
// Post: Return value is true if length is equal
//  to MAX_LENGTH and false otherwise
{
      return (length == MAX_LENGTH);
}
      
int  List::Length ()  const
// Post: Return value is length
{    
      return  length;
}

void List::Insert (/* in */  ItemType  item)
// Pre: length < MAX_LENGTH && item is assigned
// Post: data[length@entry] == item && 
//       length == length@entry + 1
{
     data[length] = item;
     length++;
}


bool List::IsPresent( /* in */ ItemType item) const   
// Searches the list for item, reporting  whether found
// Post: Function value is true, if item is in 
//   data[0 . . length-1] and is false otherwise
{    
    int index  =  0;
    while (index < length && item != data[index])
          index++;

    return  (index < length);
}

void  List::Delete ( /* in */  ItemType  item) 
// Pre: length > 0  &&  item is assigned
// Post: IF item is in data array at entry
//      First occurrence of item is no longer 
//   in array
//         && length == length@entry - 1
//      ELSE
//       length and data array are unchanged
{    
    int  index  =  0;
    
    while (index < length  && item != data[index])
          index++;

    // IF item found, move last element into 
    //  item’s place
    if (index < length)
    {
          data[index] = data[length - 1];
          length--;
    }
}


void List::Reset()
// Post: currentPos has been initialized.
{
    currentPos = 0;
}

ItemType List::GetNextItem ()
// Pre: No transformer has been executed since last call
// Post:Return value is currentPos@entry
//   Current position has been updated
//   If last item returned, next call returns first item
{
    ItemType item;
    item = data[currentPos];
    if (currentPos == length - 1)
        currentPos = 0;
    else
        currentPos++;
    return item;    
}

void  List::SelSort () 
// Sorts list into ascending order 
{   
    ItemType temp;
    int sIndx;
    int minIndx; // Index of minimum so far    
    
    for (int passCount = 0; passCount < length - 1; passCount++) {

       minIndx = passCount;

       // Find index of smallest value left
       for (sIndx = passCount + 1; sIndx < length; sIndx++)  {
          if (data[sIndx] < data[minIndx])
                minIndx = sIndx;
       }

       temp = data[minIndx];     // Swap 
       data[minIndx] = data[passCount];
       data[passCount] = temp;
   }
}

===============================================================

// main.cpp
// client program for the unsorted list in array based implementation
// It illustrates the usage of list member functions

#include "list.h"
#include <iostream>
#include <fstream>
#include <cassert>
using namespace std;

int main ()  
{
    List aList;  // created an emtpy list class object
    ItemType value;
    ifstream myIn("listData.dat");
    assert(myIn);

    while (!aList.IsFull() && (myIn>>value))  {
        if (!aList.IsPresent(value)) // maintain a list of unique values
            aList.Insert(value);
    }

    cout << "The unsorted list of values are: " << endl;
    for (int i=0; i<aList.Length(); i++)   {
        cout << aList.GetNextItem() << endl;
    }
        
    // version 1
    cout << "Enter value to delete : "; 
    cin >> value;
    aList.Delete(value);
    cout << "After deleting, the list of values are: " << endl;
    for (int i=0; i<aList.Length(); i++)   {
        cout << aList.GetNextItem() << endl;
    }

    // version 2
    /*
    aList.Reset();   // ?!!
    aList.SelSort();
    cout << "After sorting, the list of values are: " << endl;
    for (int i=0; i<aList.Length(); i++)   {
        cout << aList.GetNextItem() << endl;
    }
    */

    myIn.close();
    return 0;
}
