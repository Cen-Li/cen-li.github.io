////Programmer:			Chris Vogel
//	Assignment:			OLA4B
//	Class:				CSCI 2170-002
//	Course instructor:	Dr. Cen Li
//	Due date:			Sunday, 03/20/2011
//
//	Descrition: This is the implementation file for MazeClass.

#include "MazeClass.h"
#include <iostream>
#include <fstream>

using namespace std;

// void ReadMaze
// Description: This function reads the maze from a data file
// Arguments:
//	ifstream& mazeFile: location of maze data
// Precondition: There is no maze
// Postcondition: The maze information from the file is used to
//		populate the 2D maze array
void MazeClass::ReadMaze(ifstream& mazeFile)
{
	// Read the data from the file
	mazeFile >> numRows;
	mazeFile >> numColumns;
	mazeFile >> entrance.y;
	mazeFile >> entrance.x;
	mazeFile >> exit.y;
	mazeFile >> exit.x;
	
	// Make pointer array (rows)
	maze = new SquareType* [numRows];
	// For every row
	for(int i = 0; i < numRows; i++)
	{
		// Make pointer array (columns)
		maze[i] = new SquareType [numColumns];
		
		// We don't want the newline characters
		mazeFile.ignore(1, '\n');
		
		// For every column
		for(int j = 0; j < numColumns; j++)
		{
			char square;
			// Read a character from the data file to square
			mazeFile.get(square);
			
			// Give each column a SquareType
			switch(square)
			{
				case '*':
					maze[i][j] = WALL;
					break;
				case ' ':
					maze[i][j] = CLEAR;
					break;
			}
		}
	}
}


// void Display
// Description: This function displays the maze and converts the
//	SquareType values to human-readable values
// Precondition: None
// Postcondition: The maze is displayed
void MazeClass::Display() const
{
	// For every row
	for(int i = 0; i < numRows; i++)
	{
		// For every column
		for(int j = 0; j < numColumns; j++)
		{
			// Convert the SquareType to human-readable form
			// and display
			switch(maze[i][j])
			{
				case WALL:
					cout << '*';
					break;
				case VISITED:
					cout << 'v';
					break;
				case PATH:
					cout << 'p';
					break;
				case CLEAR:
					cout << ' ';
					break;
			}
		}
		
		// The end of a row
		cout << endl;
	}
}


// Coordinate GetEntrance
// Description: This function returns the entrance of the maze as a
// 	coordinate.
// Precondition: None
// Postcondition: The entrance coordinate is returned
Coordinate MazeClass::GetEntrance() const
{
	return entrance;
}


// Coordinate GetExit
// Description: This function returns the exit of the maze as a
// 	coordinate.
// Precondition: None
// Postcondition: The exit coordinate is returned
Coordinate MazeClass::GetExit() const
{
	return exit;
}

// bool MarkVisited
// Description: This function marks a point in the maze as visited.
// Arguments:
//	Coordinate point: the point to be marked visited
// Precondition: The point is marked clear
// Postcondition: The point is marked visited
// return TRUE: The operation was successful
// return FALSE: The operation was unsuccessful
bool MazeClass::MarkVisited(Coordinate point)
{
	// If the point is a valid one
	// and
	// If the point is not a wall
	if(IsInMaze(point) && !IsWall(point))
	{
		// Mark visited
		maze[point.y][point.x] = VISITED;
		
		// The operation was successful
		return true;
	}
	
	// The operation was unsuccessful
	// Was a wall?
	// Was not in the maze?
	return false;
}


// bool MarkPath
// Description: This function marks a point in the maze as part of
//	the solution.
// Arguments:
//	Coordinate point: the point to be marked as part of the path
// Precondition: The point is marked clear
// Postcondition: The point is marked part of the path
// return TRUE: The operation was successful
// return FALSE: The operation was unsuccessful
bool MazeClass::MarkPath(Coordinate point)
{
	// If the point is a valid one
	// and
	// If the point is not a wall
	if(IsInMaze(point) && !IsWall(point))
	{
		// Mark as path
		maze[point.y][point.x] = PATH;
		
		// The operation was successful
		return true;
	}
	
	// The operation was unsuccessful
	// Was a wall?
	// Was not in the maze?
	return false;
}

// bool IsWall
// Description: This function returns whether a certain point is a wall
// Arguments:
//	Coordinate point: the point that could be a wall
// Precondition: None
// Postcondition: If TRUE, the point is a wall. If FALSE, the point
//	is not a wall.
bool MazeClass::IsWall(Coordinate point) const
{
	return (maze[point.y][point.x] == WALL);
}

// bool IsClear
// Description: This function returns whether a certain point is clear
// Arguments:
//	Coordinate point: the point that could be clear
// Precondition: None
// Postcondition: If TRUE, the point is clear. If FALSE, the point
//	is not clear.
bool MazeClass::IsClear(Coordinate point) const
{
	return maze[point.y][point.x] == CLEAR;
}

// bool IsPath
// Description: This function returns whether a certain point is part
//	of the solution (the path).
// Arguments:
//	Coordinate point: the point that could be part of the path
// Precondition: None
// Postcondition: If TRUE, the point is part of the path. If FALSE,
//	the point is not part of the path.
bool MazeClass::IsPath(Coordinate point) const
{
	return maze[point.y][point.x] == PATH;
}

// bool IsVisited
// Description: This function returns whether a certain point
//	is visited
// Arguments:
//	Coordinate point: the point that could be visited
// Precondition: None
// Postcondition: If TRUE, the point is visited. If FALSE, the point
//	is not visited.
bool MazeClass::IsVisited(Coordinate point) const
{
	return maze[point.y][point.x] == VISITED;
}

// bool IsExit
// Description: This function returns whether a certain point
//	is the exit
// Arguments:
//	Coordinate point: the point that could be the exit
// Precondition: None
// Postcondition: If TRUE, the point is the exit. If FALSE, the point
//	is not the exit.
bool MazeClass::IsExit(Coordinate point) const
{
	return (point.x == exit.x && point.y == exit.y);
}

// bool IsInMaze
// Description: This function returns whether a certain point is
//	in the maze
// Arguments:
//	Coordinate point: the point that could be in the maze
// Precondition: None
// Postcondition: If TRUE, the point is in the maze. If FALSE,
//	the point is not in the maze.
bool MazeClass::IsInMaze(Coordinate point) const
{
	return (point.y <= numRows && point.x <= numColumns);
}


// Destructor ~MazeClass
// Description: This is the destructor for MazeClass.
// Precondition: The pointers have memory allocated
// Postcondition: The pointers have been cleared
MazeClass::~MazeClass()
{
	// Clear the pointers from memory
	for(int i = 0; i < numRows; i++)
		delete [] maze[i];
	delete [] maze;
}

