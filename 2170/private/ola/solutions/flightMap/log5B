Script started on Tue Apr  5 23:07:39 2011
$ pr -n -t -e4 sortedListClass.h
    1	////Programmer:         Chris Vogel
    2	//  Assignment:         OLA5B
    3	//  Class:              CSCI 2170-002
    4	//  Course instructor:  Dr. Cen Li
    5	//  Due date:           Tuesday, 04/05/2011
    6	//
    7	//  Descrition: This is the a specification file of sortedListClass.
    8	
    9	#ifndef List_H
   10	#define List_H
   11	
   12	#include "type.h"
   13	#include <iostream>
   14	using namespace std;
   15	
   16	// Define listItemType to be FlightStruct
   17	typedef FlightStruct listItemType;
   18	
   19	struct Node        // a node on the list
   20	{  listItemType item;  // a data item on the list
   21	   Node * next;  // pointer to next node
   22	};  // end struct
   23	
   24	typedef Node* nodePtr;  // pointer to node
   25	
   26	class listClass
   27	{
   28	    public:
   29	        // Default constructor
   30	        // Precondition: listClass is uninitialized
   31	        // Postcondition: Size = 0, Head = NULL
   32	        listClass();
   33	        
   34	        // Copy constructor
   35	        // Precondition: listClass is uninitialized
   36	        // Postcondition: listClass has an exact copy of another list
   37	        listClass(listClass& copiedList);
   38	        
   39	        // Destructor
   40	        // Precondition: the linked list still has memory allocated
   41	        // Postcondition: the linked list is completely cleared from memory
   42	        ~listClass();
   43	
   44	        // void ListInsert()
   45	        // Arguments:
   46	        //  listItemType& NewItem: The new item to be inserted
   47	        //  bool& Success: true if inserted, false if not
   48	        // Precondition: The linked list does not have NewItem
   49	        // Postcondition: The list does have NewItem. Size is incremented.
   50	        void ListInsert(const listItemType& NewItem,  bool& Success);
   51	        
   52	        // void ListRetrieve()
   53	        // Description: This function retrieves the item that matches
   54	        //  a certain part of itemPlaceholder and uses it to complete
   55	        //  itemPlaceholder. The specific behavior depends on how the
   56	        //  == operator is overloaded. For this assignment,
   57	        //  itemPlaceHolder is a FlightStruct, and the
   58	        //  == operator is overloaded to match origin city and 
   59	        //  destination city.
   60	        // Arguments:
   61	        //  listItemType& itemPlaceholder: The variable that will be 
   62	        //      completely populated when a match is found.
   63	        //  bool& success: True if the match was found, false if not.
   64	        // Precondition: An incomplete listItemType is passed
   65	        // Postcondition: That listItemType is completed upon a match.
   66	        void ListRetrieve(listItemType& itemPlaceholder, bool& success);
   67	        
   68	        // listItemType ListRetrieve()
   69	        // Description: This function retrieves a flight at a certain position
   70	        //  in the linked list. The copy constructor depends on this function.
   71	        // Arguments:
   72	        //  int index: the position in the linked list
   73	        // Precondition: None
   74	        // Postcondition: The listItemType at that position is returned.
   75	        listItemType ListRetrieve(int index);
   76	            
   77	        // void ListDelete()
   78	        // Description: This function deletes a listItemType in the list
   79	        //  that matches the listItemType passed into this function. What
   80	        //  specifically is meant by "matches" depends on the overloaded
   81	        //  == operator. In this assignment, == matches origin and
   82	        //  destination cities of a FlightStruct.
   83	        // Arguments:
   84	        //  listItemType& itemPlaceholder: the item to delete from the list
   85	        //  bool& success: True if deleted, false if not. False if the item
   86	        //      doesn't exist in the first place.
   87	        // Precondition: The list contains all the items
   88	        // Postcondition: An item that matches the user-defined item is deleted
   89	        //  Size is decremented by one.
   90	        void ListDelete(listItemType& itemPlaceholder, bool& success);
   91	        
   92	        // int ListLength()
   93	        // Description: Returns the length of the list
   94	        // Precondition: None
   95	        // Postcondition: The length of the list is returned
   96	        int ListLength();
   97	        
   98	        // bool ListIsEmpty()
   99	        // Description: Returns whether the list is empty or not
  100	        // Precondition: None
  101	        // Postcondition: Returns true if empty and false if not empty
  102	        bool ListIsEmpty();
  103	        
  104	        // Overloaded <<
  105	        // Description: Overloads the << operator to print the entire linked
  106	        //  list.
  107	        friend  ostream & operator << (ostream & os,const listClass & rhs);
  108	
  109	    private:
  110	        int     Size;  // number of items in list
  111	        nodePtr Head;  // pointer to linked list of items
  112	}; // end class
  113	
  114	#endif
  115	// End of header file.
$ pr -n -t -e4 sortedListClass.cpp
    1	////Programmer:         Chris Vogel
    2	//  Assignment:         OLA5B
    3	//  Class:              CSCI 2170-002
    4	//  Course instructor:  Dr. Cen Li
    5	//  Due date:           Tuesday, 04/05/2011
    6	//
    7	//  Descrition: This is the implementation file of sortedListClass.
    8	
    9	#include "sortedListClass.h"     // Header file
   10	
   11	#include <cstddef>    // for NULL
   12	#include <cassert>    // for assert()
   13	#include <iostream>
   14	#include <iomanip>
   15	using namespace std;
   16	
   17	// Default constructor
   18	// Precondition: listClass is uninitialized
   19	// Postcondition: Size = 0, Head = NULL
   20	listClass::listClass(): Size(0), Head(NULL)
   21	{
   22	}  // end default constructor
   23	
   24	
   25	// Copy constructor
   26	// Precondition: listClass is uninitialized
   27	// Postcondition: listClass has an exact copy of another list
   28	listClass::listClass(listClass& copiedList)
   29	{
   30	    // Transfer the new size over to the new list
   31	    Size = copiedList.ListLength();
   32	    
   33	    // Head is NULL to begin with
   34	    Head = NULL;
   35	    
   36	    // If the list isn't empty
   37	    if(Size > 0)
   38	    {
   39	        // Current is Head (NULL) to start with
   40	        nodePtr current = Head;
   41	        
   42	        // For every item in the linked list
   43	        for(int i = 0; i < Size; i++)
   44	        {
   45	            // Create a new item at current
   46	            current = new Node;
   47	            
   48	            // Make the next location NULL for now
   49	            current->next = NULL;
   50	            
   51	            // Get the item from the copied list and put it in the new one
   52	            current->item = copiedList.ListRetrieve(i);
   53	            
   54	            // Move to the next location in the list
   55	            current = current->next;
   56	        }
   57	    }
   58	}
   59	
   60	// Destructor
   61	// Precondition: the linked list still has memory allocated
   62	// Postcondition: the linked list is completely cleared from memory
   63	listClass::~listClass()
   64	{
   65	    // previous and current locations in the list
   66	    nodePtr prev, curr;
   67	    curr = Head;
   68	    // While the list isn't empty
   69	    // Delete each item
   70	    while(Head != NULL)
   71	    {
   72	        prev = curr;
   73	        curr = curr->next;
   74	        delete prev;
   75	        Head = curr;
   76	    }
   77	        
   78	} // end destructor
   79	
   80	
   81	// void ListInsert()
   82	// Arguments:
   83	//  listItemType& NewItem: The new item to be inserted
   84	//  bool& Success: true if inserted, false if not
   85	// Precondition: The linked list does not have NewItem
   86	// Postcondition: The list does have NewItem. Size is incremented.
   87	void listClass::ListInsert(const listItemType &NewItem, 
   88	                           bool& Success)
   89	{
   90	    // previous and current locations in the list
   91	    nodePtr prev, curr;
   92	    
   93	    // Create the node
   94	    nodePtr newNode = new Node;
   95	    newNode->item = NewItem;
   96	    newNode->next = NULL;
   97	    
   98	    // if the item goes at the beginning
   99	    // NOTE: Overloaded < operator to compare based on destination city.
  100	    //  See type.cpp.
  101	    if((Head == NULL) || (Head != NULL && (newNode->item < Head->item)))
  102	    {
  103	            newNode->next = Head;
  104	            Head = newNode;
  105	    }
  106	    
  107	    // If the item goes at the middle or end
  108	    else
  109	    {
  110	        curr = Head;
  111	        
  112	        // While not going past the list and while the current list item
  113	        // is less than the new item
  114	        // NOTE: Overloaded < operator to compare based on destination city.
  115	        //  See type.cpp.
  116	        while(curr != NULL && (curr->item < newNode->item))
  117	        {
  118	            prev = curr;
  119	            curr = curr->next;
  120	        }
  121	        
  122	        prev->next = newNode;
  123	        newNode->next = curr;
  124	        
  125	    }
  126	    
  127	    Size++;
  128	    Success = true;
  129	
  130	} // end ListInsert
  131	
  132	
  133	// int ListLength()
  134	// Description: Returns the length of the list
  135	// Precondition: None
  136	// Postcondition: The length of the list is returned
  137	int listClass::ListLength()
  138	{
  139	    return Size;
  140	}
  141	
  142	// bool ListIsEmpty()
  143	// Description: Returns whether the list is empty or not
  144	// Precondition: None
  145	// Postcondition: Returns true if empty and false if not empty
  146	bool listClass::ListIsEmpty()
  147	{
  148	    if(Size > 0)
  149	        return false;
  150	    else
  151	        return true;
  152	}
  153	
  154	
  155	// void ListRetrieve()
  156	// Description: This function retrieves the item that matches
  157	//  a certain part of itemPlaceholder and uses it to complete
  158	//  itemPlaceholder. The specific behavior depends on how the
  159	//  == operator is overloaded. For this assignment,
  160	//  itemPlaceHolder is a FlightStruct, and the
  161	//  == operator is overloaded to match origin city and 
  162	//  destination city.
  163	// Arguments:
  164	//  listItemType& itemPlaceholder: The variable that will be 
  165	//      completely populated when a match is found.
  166	//  bool& success: True if the match was found, false if not.
  167	// Precondition: An incomplete listItemType is passed
  168	// Postcondition: That listItemType is completed upon a match.
  169	void listClass::ListRetrieve(listItemType& itemPlaceholder, bool& success)
  170	{
  171	    success = false;
  172	    
  173	    // The current location - head for now
  174	    nodePtr curr = Head;
  175	    
  176	    // While we're not at the end of the list
  177	    // While the item has not been found
  178	    while(curr != NULL && !success)
  179	    {
  180	        // If the given item matches the current item in the list
  181	        // (For this assignment, uses an overloaded == operator)
  182	        if(curr->item == itemPlaceholder)
  183	        {
  184	            // Complete the rest of itemPlaceHolder
  185	            itemPlaceholder = curr->item;
  186	            
  187	            // Mark that we found it
  188	            success = true;
  189	        }
  190	        
  191	        // Move to the next item in the list
  192	        curr = curr->next;
  193	    }
  194	}
  195	
  196	// listItemType ListRetrieve()
  197	// Description: This function retrieves a flight at a certain position
  198	//  in the linked list. The copy constructor depends on this function.
  199	// Arguments:
  200	//  int index: the position in the linked list
  201	// Precondition: None
  202	// Postcondition: The listItemType at that position is returned.
  203	listItemType listClass::ListRetrieve(int index)
  204	{
  205	    nodePtr current = Head;
  206	    
  207	    // Move to the "index" position of the list
  208	    for(int i = 0; i < index; i++)
  209	    {
  210	        current = current->next;
  211	    }
  212	    
  213	    // Return the flight that is there
  214	    return current->item;
  215	}
  216	
  217	
  218	// void ListDelete()
  219	// Description: This function deletes a listItemType in the list
  220	//  that matches the listItemType passed into this function. What
  221	//  specifically is meant by "matches" depends on the overloaded
  222	//  == operator. In this assignment, == matches origin and
  223	//  destination cities of a FlightStruct.
  224	// Arguments:
  225	//  listItemType& itemPlaceholder: the item to delete from the list
  226	//  bool& success: True if deleted, false if not. False if the item
  227	//      doesn't exist in the first place.
  228	// Precondition: The list contains all the items
  229	// Postcondition: An item that matches the user-defined item is deleted
  230	//  Size is decremented by one.
  231	void listClass::ListDelete(listItemType& itemPlaceholder, bool& success)
  232	{
  233	    success = false;
  234	    
  235	    // The current location - head for now
  236	    nodePtr current = Head;
  237	    
  238	    // The previous location
  239	    nodePtr previous = current;
  240	    
  241	    // If the list is empty
  242	    if(Head == NULL)
  243	        cout << "Delete failed: List is already empty!" << endl << endl;
  244	    
  245	    // If the list is not empty
  246	    else
  247	    {
  248	        // If the first item does not match the user's input
  249	        if(Head->item == itemPlaceholder)
  250	        {
  251	            current = current->next;
  252	            delete Head;
  253	            Head = current;
  254	            Size--;
  255	            success = true;
  256	            cout << "Item deleted successfully." << endl << endl;
  257	            return;
  258	        }
  259	        
  260	        // While we are not at the last list item
  261	        // &&
  262	        // While the current item does not match the user's input
  263	        while(current != NULL
  264	            && !(current->item == itemPlaceholder))
  265	        {
  266	            // Move through the list
  267	            previous = current;
  268	            current = current->next;
  269	        }
  270	        
  271	        // If we are at the last list item
  272	        // and it does not match
  273	        if(current == NULL)
  274	        {
  275	            cout << "DELETION FAILED: This item was not in the list!" << endl << endl;
  276	        }
  277	        
  278	        // If we are not at the last list item
  279	        // or if the last item is the match
  280	        else
  281	        {
  282	            previous->next = current->next;
  283	            current->next = NULL;
  284	            delete current;
  285	            current = NULL;
  286	            success = true;
  287	            cout << "Item deleted successfully." << endl << endl;
  288	            Size--;
  289	        }
  290	    }
  291	}
  292	
  293	// Overloaded <<
  294	// Description: Overloads the << operator to print the entire linked
  295	//  list.
  296	ostream & operator << (ostream& os, const listClass& rhs)
  297	{
  298	    // The current location - head for now
  299	    nodePtr curr = rhs.Head;
  300	    
  301	    // For ever item in the list
  302	    // Display each item
  303	    for(int i = 0; i < rhs.Size; i++)
  304	    {
  305	            os << curr->item << endl;
  306	            
  307	            // Move to next list item
  308	            curr = curr->next;
  309	    }
  310	    return os;
  311	}   
$ pr -n -t -e4 flightMap.h
    1	////Programmer:         Chris Vogel
    2	//  Assignment:         OLA5B
    3	//  Class:              CSCI 2170-002
    4	//  Course instructor:  Dr. Cen Li
    5	//  Due date:           Tuesday, 04/05/2011
    6	//
    7	//  Descrition: This is the a specification file of FlightMap.
    8	#ifndef FLIGHTMAP_H
    9	#define FLIGHTMAP_H
   10	
   11	#include "type.h"
   12	#include "sortedListClass.h"
   13	#include <iostream>
   14	#include <iomanip>
   15	#include <fstream>
   16	
   17	using namespace std;
   18	
   19	class FlightMap
   20	{
   21	    public:
   22	        // Constructor FlightMap()
   23	        // Precondition: None
   24	        // Postcondition: number of cities is initialized,
   25	        //  cities.dat and flights.dat are opened.
   26	        FlightMap();
   27	        
   28	        // Copy constructor FlightMap()
   29	        // Precondition: None
   30	        // Postcondition: The VALUES of one FlightMap are copied
   31	        //  to another.
   32	        // Arguments:
   33	        //  const FlightMap& fm: the FlightMap to copy
   34	        FlightMap(const FlightMap& fm);
   35	        
   36	        // Destructor ~FlightMap()
   37	        // Precondition: cities and flightMap still take up memory, and
   38	        //  files are still opened
   39	        // Postcondition: all memory is cleared; all files are closed
   40	        ~FlightMap();
   41	        
   42	        // void ReadCities()
   43	        // Description: Reads the cities from cities.dat, dynamically 
   44	        //  allocates memory in a string array for each city, and then
   45	        //  sorts the cities in ascending order.
   46	        // Precondition: None
   47	        // Postcondition: The cities from cities.dat are placed in a 
   48	        //  dynamically allocated string array.
   49	        void ReadCities();
   50	        
   51	        // void ReadFlights()
   52	        // Description: Dynamically allocates a sorted list for each origin
   53	        //  city in flightMap. Flights are read from flights.dat and placed
   54	        //  into the appropriate city's sorted list.
   55	        // Precondition: None
   56	        // Postcondition: The flights from flights.dat are placed into their
   57	        //  origin's cities sorted list.
   58	        void ReadFlights();
   59	        
   60	        // Overloaded << operator
   61	        // Prints the entire fightMap
   62	        friend ostream& operator << (ostream& os,const FlightMap& rhs);
   63	        
   64	    private:
   65	        // The number of cities
   66	        int numberCities;
   67	        
   68	        // Dynamically allocated array of cities
   69	        string* cities;
   70	        
   71	        // Dynamically allocated array of sorted lists
   72	        listClass* flightMap;
   73	        
   74	        // cities.dat: list of cities
   75	        ifstream citiesFile;
   76	        
   77	        // flights.dat: list of flights
   78	        ifstream flightsFile;
   79	        
   80	        // int FindIndex()
   81	        // Description: Return the index of a given city in the flightmap
   82	        // Arguments:
   83	        //  string origin: The city whose index is unknown
   84	        // Precondition: The program does not know the index of a given city
   85	        // Postcondition: The index of a given city is returned
   86	        int FindIndex(string origin);
   87	};
   88	
   89	
   90	#endif
$ pr -n -t -e4 flightMap.cpp
    1	////Programmer:         Chris Vogel
    2	//  Assignment:         OLA5B
    3	//  Class:              CSCI 2170-002
    4	//  Course instructor:  Dr. Cen Li
    5	//  Due date:           Tuesday, 04/05/2011
    6	//
    7	//  Descrition: This is the a implementation file of FlightMap.
    8	
    9	#include "type.h"
   10	#include "sortedListClass.h"
   11	#include "flightMap.h"
   12	#include <iostream>
   13	#include <iomanip>
   14	#include <fstream>
   15	
   16	using namespace std;
   17	
   18	// Constructor FlightMap()
   19	// Precondition: None
   20	// Postcondition: number of cities is initialized,
   21	//  cities.dat and flights.dat are opened.
   22	FlightMap::FlightMap()
   23	{
   24	    // The number of cities
   25	    numberCities = 0;
   26	    
   27	    citiesFile.open("cities.dat");
   28	    flightsFile.open("flights.dat");
   29	}
   30	
   31	// Copy constructor FlightMap()
   32	// Precondition: None
   33	// Postcondition: The VALUES of one FlightMap are copied
   34	//  to another.
   35	// Arguments:
   36	//  const FlightMap& fm: the FlightMap to copy
   37	FlightMap::FlightMap(const FlightMap& fm)
   38	{
   39	    numberCities = fm.numberCities;
   40	    flightMap = new listClass [numberCities];
   41	    
   42	    // For every city
   43	    for(int i = 0; i < numberCities; i++)
   44	    {
   45	        flightMap[i] = fm.flightMap[i];
   46	    }
   47	    
   48	    cities = new string [numberCities];
   49	    
   50	    // For every city
   51	    for(int i = 0; i < numberCities; i++)
   52	    {
   53	        cities[i] = fm.cities[i];
   54	    }
   55	    
   56	}
   57	    
   58	// Destructor ~FlightMap()
   59	// Precondition: cities and flightMap still take up memory, and
   60	//  files are still opened
   61	// Postcondition: all memory is cleared; all files are closed
   62	FlightMap::~FlightMap()
   63	{
   64	    delete [] cities;
   65	    delete [] flightMap;
   66	    citiesFile.close();
   67	    flightsFile.close();
   68	}
   69	
   70	// void ReadCities()
   71	// Description: Reads the cities from cities.dat, dynamically 
   72	//  allocates memory in a string array for each city, and then
   73	//  sorts the cities in ascending order.
   74	// Precondition: None
   75	// Postcondition: The cities from cities.dat are placed in a 
   76	//  dynamically allocated string array.
   77	void FlightMap::ReadCities()
   78	{
   79	    citiesFile >> numberCities;
   80	    cities = new string [numberCities];
   81	    
   82	    // For every city
   83	    for(int i = 0; i < numberCities; i++)
   84	    {
   85	        citiesFile >> cities[i];
   86	    }
   87	    
   88	        
   89	    bool sorted = false; // Are the cities sorted?
   90	    int i;
   91	    
   92	    // While the cities are not sorted,
   93	    // do a bubble sort.
   94	    while(!sorted)
   95	    {
   96	        int last = numberCities - 1;
   97	        sorted = true;
   98	        for (i = 0; i < last; i++)
   99	        {
  100	            if(cities[i] > cities[i + 1])
  101	            {
  102	                string city1 = cities[i];
  103	                cities[i] = cities[i + 1];
  104	                cities[i + 1] = city1;
  105	                sorted = false;
  106	            }
  107	        }
  108	        last--;
  109	    }
  110	}
  111	
  112	// void ReadFlights()
  113	// Description: Dynamically allocates a sorted list for each origin
  114	//  city in flightMap. Flights are read from flights.dat and placed
  115	//  into the appropriate city's sorted list.
  116	// Precondition: None
  117	// Postcondition: The flights from flights.dat are placed into their
  118	//  origin's cities sorted list.
  119	void FlightMap::ReadFlights()
  120	{
  121	    flightMap = new listClass [numberCities];
  122	    
  123	    // pieces of FlightStruct
  124	    int flightNumber;
  125	    string origin;
  126	    string destination;
  127	    int price;
  128	    
  129	    // Flight to be inserted into list
  130	    FlightStruct tempFlight;
  131	    
  132	    // While there is flight information to read from flights.dat
  133	    while(flightsFile >> flightNumber >> origin >> destination >> price)
  134	    {
  135	        tempFlight.flightNumber = flightNumber;
  136	        tempFlight.origin = origin;
  137	        tempFlight.destination = destination;
  138	        tempFlight.price = price;
  139	        
  140	        bool success = false;
  141	        
  142	        flightMap[FindIndex(origin)].ListInsert(tempFlight, success);
  143	    }
  144	}
  145	
  146	
  147	// int FindIndex()
  148	// Description: Return the index of a given city in the flightmap
  149	// Arguments:
  150	//  string origin: The city whose index is unknown
  151	// Precondition: The program does not know the index of a given city
  152	// Postcondition: The index of a given city is returned
  153	int FlightMap::FindIndex(string origin)
  154	{
  155	    int i = 0;
  156	    // While less passes than the number of cities
  157	    // &&
  158	    // While the origin city doesn't match the current city
  159	    while(i < numberCities && origin != cities[i])
  160	    {
  161	        i++;
  162	    }
  163	    
  164	    return i;
  165	}
  166	
  167	// Overloaded << operator
  168	// Prints the entire fightMap
  169	ostream & operator << (ostream& os, const FlightMap& rhs)
  170	{
  171	    // for every city
  172	    for(int i = 0; i < rhs.numberCities; i++)
  173	    {
  174	        // if the city has outgoing flights
  175	        if(!rhs.flightMap[i].ListIsEmpty())
  176	            os << "From " << rhs.cities[i] << " to: "
  177	                << endl << rhs.flightMap[i];
  178	    }
  179	    return os;
  180	}
$ pr -n t [K[K-t -e4 type.h
    1	////Programmer:         Chris Vogel
    2	//  Assignment:         OLA5B
    3	//  Class:              CSCI 2170-002
    4	//  Course instructor:  Dr. Cen Li
    5	//  Due date:           Tuesday, 04/05/2011
    6	//
    7	//  Descrition: This is the a specification file for FlightStruct.
    8	
    9	#ifndef Type_H
   10	#define Type_H
   11	#include <string>
   12	#include <iostream>
   13	
   14	using namespace std;
   15	
   16	// struct FlightStruct
   17	// Information about each flight
   18	struct FlightStruct
   19	{
   20	   int flightNumber; // Flight number
   21	   string origin; // Origin city
   22	   string destination; // Desination city
   23	   int price; // Ticket price
   24	
   25	    // Overloaded < operator
   26	    // Sorts in ascending order by destination city
   27	   bool operator < (const FlightStruct & rhs) const;
   28	   
   29	    // Overloaded == operator
   30	    // Regards FlighStructs as equal ONLY if origin and destination
   31	    // cities match
   32	   bool operator == (const FlightStruct& rhs) const;
   33	  
   34	    // Overloaded << operator
   35	    // Prints something like
   36	    // Boston               3345       $440
   37	   friend ostream& operator << (ostream& os,const FlightStruct& rhs);
   38	};
   39	
   40	#endif
$ pr -n -t -e4 type.cpp
    1	////Programmer:         Chris Vogel
    2	//  Assignment:         OLA5B
    3	//  Class:              CSCI 2170-002
    4	//  Course instructor:  Dr. Cen Li
    5	//  Due date:           Tuesday, 04/05/2011
    6	//
    7	//  Descrition: This is the a implementation file of FlightStruct.
    8	
    9	#include "type.h"
   10	#include <cstddef>    // for NULL
   11	#include <cassert>    // for assert()
   12	#include <iostream>
   13	#include <iomanip>
   14	
   15	// Overloaded < operator
   16	// Sorts in ascending order by destination city 
   17	bool FlightStruct::operator < (const FlightStruct & rhs) const
   18	{
   19	    return (destination < rhs.destination);
   20	}
   21	
   22	// Overloaded == operator
   23	// Regards FlighStructs as equal ONLY if origin and destination
   24	// cities match
   25	bool FlightStruct::operator == (const FlightStruct& rhs) const
   26	{
   27	    return (origin == rhs.origin && destination == rhs.destination);
   28	}
   29	
   30	// Overloaded << operator
   31	// Prints something like
   32	// Boston               3345       $440
   33	ostream& operator << (ostream& os,const FlightStruct& rhs)
   34	{
   35	    os << setw(19) << " " << left 
   36	        << setw(20) << rhs.destination
   37	        << setw(5) << left << rhs.flightNumber
   38	        << setw(8) << right << "$" << rhs.price;
   39	    
   40	    return os;
   41	}
$ pr -n -t -e4 ola5B.cc
    1	////Programmer:         Chris Vogel
    2	//  Assignment:         OLA5B
    3	//  Class:              CSCI 2170-002
    4	//  Course instructor:  Dr. Cen Li
    5	//  Due date:           Tuesday, 04/05/2011
    6	//
    7	//  Descrition: This is the a client file to test flightMap.
    8	
    9	#include "sortedListClass.h"
   10	#include "flightMap.h"
   11	
   12	#include <iostream>
   13	#include <fstream>
   14	#include <cassert>
   15	#include <iomanip>
   16	using namespace std;
   17	
   18	int main()
   19	{   
   20	    // The flight map
   21	    FlightMap flightMap;
   22	    
   23	    // Read the cities from cities.dat
   24	    flightMap.ReadCities();
   25	    
   26	    // Read the flights from flights.dat
   27	    flightMap.ReadFlights();
   28	    
   29	    cout << "                        FLIGHT MAP" << endl;
   30	    // Divider
   31	    for(int i = 0; i < 60; i++)
   32	    {
   33	        cout << "=";
   34	    }
   35	    
   36	    cout << endl;
   37	    
   38	    // Headers for the table
   39	    cout << setw(10) << "Origin"
   40	        << setw(20) << "Destination"
   41	        << setw(17) << "Flight No."
   42	        << setw(10) << "Price" << endl;
   43	    
   44	    // Divider
   45	    for(int i = 0; i < 60; i++)
   46	    {
   47	        cout << "=";
   48	    }
   49	    
   50	    cout << endl;
   51	    
   52	    // Print the flight map
   53	    // Overloaded << operator
   54	    // See flightMap.cpp
   55	    cout << flightMap;
   56	    
   57	    // FOOTER
   58	    
   59	    // Divider
   60	    for(int i = 0; i < 60; i++)
   61	    {
   62	        cout << "=";
   63	    }
   64	    cout << endl << endl;
   65	    return 0;
   66	}
$ aCC sortedLIstClass.cpp flightMap.cpp ola5B.cc -o run
g++: sortedLIstClass.cpp: No such file or directory
$ aCC sortedListClass.cpo[Kp flightMap.cpp type.cpp ola5B.cc -o run
$ run
                        FLIGHT MAP
============================================================
    Origin         Destination       Flight No.     Price
============================================================
From Atlanta to: 
                   Memphis             1172        $47
                   Orlando             920         $270
From Boston to: 
                   New-York-City       112         $140
From Chicago to: 
                   Albuquerque         380         $400
                   Miami               2843        $500
                   Orlando             3940        $430
From Dallas to: 
                   Chicago             1114        $320
                   Miami               103         $350
                   San-Francisco       829         $250
From Las-Vegas to: 
                   Nashville           290         $59
From Los-Angeles to: 
                   Seattle             3746        $230
From Memphis to: 
                   Dallas              891         $140
From Nashville to: 
                   Atlanta             339         $83
                   Las-Vegas           920         $59
                   New-York-City       983         $260
From New-York-City to: 
                   Atlanta             888         $430
                   Boston              211         $140
From Orlando to: 
                   Miami               722         $80
From San-Francisco to: 
                   Los-Angeles         772         $89
                   San-Diego           8322        $120
From Washington-DC to: 
                   Boston              3345        $440
                   Orlando             233         $195
============================================================

$ exit
exit

Script done on Tue Apr  5 23:09:43 2011
